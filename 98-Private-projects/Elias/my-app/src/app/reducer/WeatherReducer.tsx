import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import axios from 'axios';
import { NULL } from 'sass';



export interface WeatherInfo {
    WeatherInfo: {
    CityNAme: string;
    WeatherDescriptionn: string;
    Temperature: number
    Weather_icons :string;
  }
  status: 'idle' | 'loading' | 'failed';

}

const initialState: WeatherInfo = {

    WeatherInfo: {
        CityNAme: "",
        WeatherDescriptionn: "",
        Temperature:0,
        Weather_icons :""
      },
  status: 'idle'
};

export const getWeatherInfoAsync = createAsyncThunk(
  'Wather/GetWatherInfo',
  async (CiteName :string, thunkAPI) => {

    try {
      const response = await axios.get(`http://api.weatherstack.com/current?access_key=d0cb4fc5cea71f7a7b2bf595fe729ca1&query=${CiteName}`)
      const data: any = response.data
      console.log("Weather data");
      console.log(data);
      return data
    } catch (error: any) {
      thunkAPI.rejectWithValue(error.response.data)
    }

  }
);


export const Weather = createSlice({
  name: 'Weather',
  initialState,
  reducers: {
    getWeather :(state,action)=>{
      state.WeatherInfo = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getWeatherInfoAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getWeatherInfoAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.WeatherInfo = action.payload;
      });
  },
});

export const getWeather = (state: RootState) => state.Weather;
export default Weather.reducer;
