import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';

export interface TextProps {
  text: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: TextProps = {
  text: 'starting...',
  status: 'idle',
};


export const categoryReducer = createSlice({
  name: 'text',
  initialState,
  reducers: {
    update: (state, action) => {
      state.text = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(getJokeAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(getJokeAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.text = action.payload;
  //     });
  // },
});

export const { update  } = categoryReducer.actions;
export const selectCategory = (state: RootState) => state.text.text;
// export const selectCategoryStauts = (state:RootState) => state.category.status;

export default categoryReducer.reducer;