import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import axios from 'axios'
export interface User {
    userInfo: {
        name: string;
        email: string;
        phone: string;
        location: string;
        gender: string;
        password: string;
    }
    isLogIn: boolean;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: User = {
    userInfo: {
        name: "",
        email: "",
        phone: "",
        location: "",
        gender: "",
        password: "",
    },
    isLogIn: false,
    status: 'idle',
};


export const fetchUser = createAsyncThunk(
    'user/fetchUser',
    async (obj: any) => {
        const { email, password } = obj
        try {
            const response = await axios.post('http://localhost:3001/users/get-user', { "email": email, "password": password })
            return response.data;
        }
        catch (err: any) {
            console.log(err.message)
        }
    }
);

export const userReducer = createSlice({
    name: 'user',
    initialState,
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchUser.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchUser.fulfilled, (state, action) => {
                state.status = 'idle';
                state.userInfo = action.payload.user;
                console.log(action.payload)
            });
    },
});


export const getName = (state: RootState) => state.user.userInfo.name;
export const getGender = (state: RootState) => state.user.userInfo.gender;
export const getUserEmail = (state: RootState) => state.user.userInfo.email;
export default userReducer.reducer;
